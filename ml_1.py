# -*- coding: utf-8 -*-
"""ML_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14KUVkb7PgqJ-DrPYoZzX83tVb1vm6nYU

# Predictive Modeling Exercise
"""

import pandas as pd
df = pd.read_csv("/content/BostonHousing.csv",)
df

df.isnull().sum() #check for missing data

import matplotlib.pyplot as plt

plt.figure()
df[["medv"]].plot.hist(alpha=0.5)
print("visualize data")

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt

import pandas as pd
import seaborn as sns

# %matplotlib inline

print("discover correlation")

correlation_matrix = df.corr().round(2)#corr() funtion from pandas
sns.heatmap(data=correlation_matrix, annot=True)

"""Based on the heatmap, we observe that there is a positive correletion bitween rm and medv and there is a negative correlation between lstat and medv.

using a scatterplot, we will observa the relationship between medv vs rm/lstat.
"""

df.plot.scatter("rm","medv",s=50)

"""As we can observe, the rm scatter plot increases linearly compared to the lstat where it shows more outliers."""

df.plot.scatter("lstat","medv",s=50)

from sklearn import linear_model
from sklearn.model_selection import train_test_split

dataX = df[["lstat","rm"]]
dataY = df[["medv"]]

#Split data into trainig and test data.

dataX_train, dataX_test, dataY_train, dataY_test = train_test_split(dataX,dataY,test_size=0.2,random_state=5)

"""#feed training data to model"""

model = linear_model.LinearRegression()
model.fit(dataX_train, dataY_train)

"""#Evaluate model using RMSE and R2_Score"""

from sklearn.metrics import mean_squared_error,r2_score



"""Implement linear regression on the Boston Housing dataset and evaluate using RMSE. Extend to implement ridge and lasso **regression**"""

dataY_train_pred = model.predict(dataX_train)

rmse = np.sqrt(mean_squared_error(dataY_train,dataY_train_pred))
r2 = r2_score(dataY_train,dataY_train_pred)
print("Model evaluation for training set:")
print("RMSE",rmse)
print("R2_SCORE", r2)

dataY_test_pred = model.predict(dataX_test)

rmse_2 = np.sqrt(mean_squared_error(dataY_test,dataY_test_pred))
r2_2 = r2_score(dataY_test, dataY_test_pred)
print("Model evaluation for testing data:")
print("RMSE",rmse_2)
print("R2_SCORE", r2_2)

"""Comparing results from the training set and testing set, we observe that the model is quite good."""

